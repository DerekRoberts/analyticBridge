// Strict mode
"use strict";

var moment = require('moment');
// Requires for reading and parsing queries.json
var fs = require('fs');
var queryFile = JSON.parse(fs.readFileSync('./config/queries.json'));

/**
 * Returns a list of all query titles defined in the configuration
 * 
 * @returns {array} List of all query titles defined in the configuration
 */
var getTitles = function() {
    return Object.keys(queryFile);
};

/**
 * Scans query entries and returns the full information object of the first
 * query entry with the title passed
 * 
 * @param title
 *                {string} value of title to search for
 * @returns {string} The full information object of the first query entry with
 *          the title passed
 */
var getQueryInfo = function(title) {
    return queryFile[title];
}

/**
 * Scans query entries and returns the title of the first query entry with the
 * xml path passed
 * 
 * @param xmlPath
 *                {string} value of XML path to search for
 * @returns {string} The title of the first query entry with the xml path passed
 */
var findTitleByXmlPath = function(xmlPath) {
    var toReturn = null;
    Object.keys(queryFile).forEach(function(queryName) {
	if (queryFile[queryName].XMLPath === xmlPath) {
	    toReturn = queryName;
	    return false;
	}
    });
    return toReturn;
}

/**
 * Adds a default ratio configuration to the stored configuration for the query
 * title passed
 * 
 * @param title
 *            {string} Title of hte query for which to add a default
 *            configuration.
 */
var addDefaultQueryConfig = function(title) {
	queryFile[title] = {
	    "title" : title,
	    "type" : "Ratio",
	    "description" : "Autogenerated on "
	            + (new moment()).format("YYYY_MM_DD"),
	    "XMLPath" : "ReportingCategories." + title
	};

}

/**
 * Save the current queries.json configuration to queries-generated.json. The
 * saved configuration will include any generated default values.
 * 
 * @param callback
 *            {function} Callback function to be called upon completion
 */
var saveGeneratedConfig = function(callback) {
	// Prepare a nicely formatted JSON string of the current configuration
	var configContents = JSON.stringify(queryFile, null, '\t');

	var savePath = __dirname + '/../config/';
	var saveFile = savePath + 'queries-generated.json';

	// Save configuration to the desired location
	fs.writeFile(saveFile, configContents, function(error) {
		if (error) {
			console.log("Error saving generated queries config to: " + saveFile
			        + "\n" + error);
			callback(error);
		} else {
			console.log("Successfully saved generated queries config to: "
			        + saveFile);
			callback();
		}
	});

}

// Functions export
module.exports = {
    getTitles : getTitles,
    getQueryInfo : getQueryInfo,
    findTitleByXmlPath : findTitleByXmlPath,
    addDefaultQueryConfig : addDefaultQueryConfig,
    saveGeneratedConfig : saveGeneratedConfig
};
